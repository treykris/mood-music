/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("let myModule = (function() {\n  let module = {};\n\n  module.accessToken = getParameterByName('access_token');\n\n  module.closureURL = '';\n\n  module.currentTracks = [];\n  module.userInfo = {};\n  module.totalPlaylists = [];\n  module.songQueue = [];\n  module.currentChosenPlaylist = {};\n  module.sortedChosenGenres = [];\n\n  module.deleteThis = '';\n  module.playlistNameValue = '';\n  module.optionsHelper = '';\n\n  module.deleteMe = '';\n  module.grandparentOfTarget = '';\n\n  module.initColor = handleBackgroundColor();\n  module.scrollPositionTracker = [];\n\n  module.isMobile = mobileCheck();\n\n  module.initScroll = {\n    happened: false,\n    moment: ''\n  };\n\n  module.wasSubmitted = false;\n  module.startTime = undefined;\n\n  module.storeMoodValue = '';\n\n  module.smoothingSupported = smoothingScrollSupportCheck();\n\n  module.mobileIsScrolling = undefined;\n\n  module.inRange = false;\n  module.scrollCount = 0;\n\n  return module;\n})();\n\nfunction smoothingScrollSupportCheck() {\n  if ('scrollBehavior' in document.documentElement.style) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nlet eventModule = (function() {\n  let events = {};\n\n  events.moveSongModal = document.querySelector('.tran-modal__mv-song');\n  events.deleteSongModal = document.querySelector('.tran-modal__del-song');\n  events.removePlaylistModal = document.querySelector(\n    '.tran-modal__rm-playlist'\n  );\n  events.moodForm = document.querySelector('.mood__form');\n  events.closeModalBtn = document.querySelectorAll('.close-modal-btn');\n  events.declineModalBtn = document.querySelectorAll('.btn--decline');\n  events.playlistFooter = document.querySelector('.playlist');\n  events.genres = document.querySelector('.genres');\n  events.genresFilterSearch = document.querySelector('.genres-filter__search');\n  events.createPlaylistSubmit = document.querySelector('.cr-pl__submit');\n  events.importPlaylistSubmit = document.querySelector('.im-pl__submit');\n  events.moodDiv = document.querySelector('.mood');\n  events.logoContainer = document.querySelector('.logo-container');\n\n  return events;\n})();\n\nfunction mobileCheck() {\n  let isMobile;\n  let logoContainer = document.querySelector('.logo-container');\n  let cssProp = window\n    .getComputedStyle(logoContainer, null)\n    .getPropertyValue('position');\n\n  if (cssProp == 'fixed') {\n    let genreModalCloseBtn = Array.from(\n      document.querySelectorAll('.close-modal-btn')\n    );\n    logoContainer.classList.toggle('show__elem');\n    isMobile = true;\n\n    // Remove Modal Close Button on phones\n    if (genreModalCloseBtn.length > 0) {\n      genreModalCloseBtn.forEach(element => {\n        removeElementFromDOM(element);\n      });\n    }\n  } else {\n    isMobile = false;\n  }\n\n  return isMobile;\n}\n\n// Random Color for Playlist\nfunction playlistColorSequence() {\n  let playlists = document.getElementsByClassName('playlist-list__playlist');\n  let colors = ['#E8A5A5', '#783E3E', '#BF4949', '#D15273'];\n\n  for (let i = 0; i < playlists.length; i++) {\n    playlists[i].style.backgroundColor = colors[i % colors.length];\n  }\n}\n\n// Close Modal\nfunction closeModal() {\n  let tranModal = document.querySelector('.tran-modal__show-modal');\n  let removePlaylistForm = document.querySelector('.tran-modal__show-form');\n  let selectMvs = document.querySelector('.mvs-select');\n  let crImPlaylistModalDisplayed = document.querySelector('.modal--show');\n  let songAttachment = document.querySelector('.song-action');\n  let importErrorMessage = document.querySelector('.im-pl__error');\n  let importErrorContainer = document.querySelector('.tab-content--error');\n  let genreAnimation = document.querySelector('.genres-active-animation');\n  let genres = document.querySelector('.genres-show');\n\n  if (genreAnimation) {\n    genreAnimation.classList.remove('genres-active-animation');\n    genres.classList.remove('genres-show');\n  }\n\n  if (songAttachment) {\n    removeElementFromDOM(songAttachment);\n  }\n\n  if (tranModal) {\n    tranModal.classList.remove('tran-modal__show-modal');\n    if (removePlaylistForm) {\n      removePlaylistForm.classList.toggle('tran-modal__show-form');\n    }\n  }\n  if (selectMvs) {\n    removeElementFromDOM(selectMvs);\n  }\n  if (crImPlaylistModalDisplayed) {\n    crImPlaylistModalDisplayed.classList.toggle('modal--show');\n  }\n  if (importErrorMessage) {\n    importErrorContainer.classList.remove('tab-content--error');\n    removeElementFromDOM(importErrorMessage);\n  }\n}\n\n// Build URL with genres\nfunction handleGenres(url, storedGenres) {\n  const genres = [\n    'acoustic',\n    'afrobeat',\n    'alt-rock',\n    'alternative',\n    'ambient',\n    'anime',\n    'black-metal',\n    'bluegrass',\n    'blues',\n    'bossanova',\n    'brazil',\n    'breakbeat',\n    'british',\n    'cantopop',\n    'chicago-house',\n    'children',\n    'chill',\n    'classical',\n    'club',\n    'comedy',\n    'country',\n    'dance',\n    'dancehall',\n    'death-metal',\n    'deep-house',\n    'detroit-techno',\n    'disco',\n    'disney',\n    'drum-and-bass',\n    'dub',\n    'dubstep',\n    'edm',\n    'electro',\n    'electronic',\n    'emo',\n    'folk',\n    'forro',\n    'french',\n    'funk',\n    'garage',\n    'german',\n    'gospel',\n    'goth',\n    'grindcore',\n    'groove',\n    'grunge',\n    'guitar',\n    'happy',\n    'hard-rock',\n    'hardcore',\n    'hardstyle',\n    'heavy-metal',\n    'hip-hop',\n    'holidays',\n    'honky-tonk',\n    'house',\n    'idm',\n    'indian',\n    'indie',\n    'indie-pop',\n    'industrial',\n    'iranian',\n    'j-dance',\n    'j-idol',\n    'j-pop',\n    'j-rock',\n    'jazz',\n    'k-pop',\n    'kids',\n    'latin',\n    'latino',\n    'malay',\n    'mandopop',\n    'metal',\n    'metal-misc',\n    'metalcore',\n    'minimal-techno',\n    'movies',\n    'mpb',\n    'new-age',\n    'new-release',\n    'opera',\n    'pagode',\n    'party',\n    'philippines-opm',\n    'piano',\n    'pop',\n    'pop-film',\n    'post-dubstep',\n    'power-pop',\n    'progressive-house',\n    'psych-rock',\n    'punk',\n    'punk-rock',\n    'r-n-b',\n    'rainy-day',\n    'reggae',\n    'reggaeton',\n    'road-trip',\n    'rock',\n    'rock-n-roll',\n    'rockabilly',\n    'romance',\n    'sad',\n    'salsa',\n    'samba',\n    'sertanejo',\n    'show-tunes',\n    'singer-songwriter',\n    'ska',\n    'sleep',\n    'songwriter',\n    'soul',\n    'soundtracks',\n    'spanish',\n    'study',\n    'summer',\n    'swedish',\n    'synth-pop',\n    'tango',\n    'techno',\n    'trance',\n    'trip-hop',\n    'turkish',\n    'work-out',\n    'world-music'\n  ];\n  let buildGenres;\n\n  // Use user chosen genres\n  if (storedGenres.length > 0) {\n    storedGenres.forEach(genre => {\n      if (buildGenres === undefined) {\n        buildGenres = `&seed_genres=${genre}`;\n      } else {\n        buildGenres += `,${genre}`;\n      }\n    });\n  } else {\n    // Randomize 5 genres if no genres were chosen\n    for (let i = 0; i < 5; i++) {\n      let randomNumber = Math.floor(Math.random() * Math.floor(genres.length));\n\n      if (buildGenres === undefined)\n        buildGenres = `&seed_genres=${genres[randomNumber]}`;\n      else {\n        buildGenres += `,${genres[randomNumber]}`;\n      }\n    }\n  }\n  url += buildGenres;\n  return url;\n}\n\n// Get accessToken from URI\nfunction getParameterByName(name, url) {\n  if (!url) url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n    results = regex.exec(url);\n  if (!results) return null;\n  if (!results[2]) return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n\n// Songs Added to Modal Action Confirmation\nfunction modalSongBodyAttachment(element) {\n  let ancestorElem = element.parentElement.parentElement.parentElement;\n  let songImg = ancestorElem.childNodes[0].src;\n  let songName =\n    ancestorElem.childNodes[1].childNodes[1].childNodes[0].textContent;\n  let artistName =\n    ancestorElem.childNodes[1].childNodes[1].childNodes[1].textContent;\n  myModule.deleteThis = ancestorElem.getAttribute('data-spotify-track');\n\n  let songBody = {\n    songAction: document.createElement('div'),\n    songActionInfo: document.createElement('div'),\n    songActionImg: document.createElement('img'),\n    songActionName: document.createElement('h5'),\n    songActionArtist: document.createElement('h6')\n  };\n\n  songBody.songAction.classList.add('song-action');\n  songBody.songActionInfo.classList.add('song-action__song-info');\n  songBody.songActionImg.classList.add('song-action__img');\n  songBody.songActionName.classList.add('song-action__song-name');\n  songBody.songActionArtist.classList.add('song-action__song-artist');\n\n  songBody.songActionImg.setAttribute('src', songImg);\n  songBody.songActionName.textContent = songName;\n  songBody.songActionArtist.textContent = artistName;\n\n  songBody.songAction.appendChild(songBody.songActionImg);\n  songBody.songAction.appendChild(songBody.songActionInfo);\n  songBody.songActionInfo.appendChild(songBody.songActionName);\n  songBody.songActionInfo.appendChild(songBody.songActionArtist);\n\n  return songBody;\n}\n\n// Song Duration Div Show\nfunction advance(duration, element, targetedElement) {\n  let increment = 10 / duration;\n  let percent = Math.min(increment * element.currentTime * 10, 100);\n  targetedElement.style.width = `${percent}%`;\n  startTimer(duration, element, percent, targetedElement);\n}\n\nfunction startTimer(duration, element, percentage, targetedElement) {\n  if (percentage < 100) {\n    setTimeout(function() {\n      advance(duration, element, targetedElement);\n    }, 100);\n  }\n  if (percentage == 100) {\n    // refactor\n    if (targetedElement.classList.contains('track__progress-bar')) {\n      let parentOfTarget = targetedElement.parentNode;\n      let trackMedia = getChildElementByClass(parentOfTarget, 'track__media');\n      let mediaControls = getChildElementByClass(trackMedia, 'media-controls');\n      let gPath = getChildElementByClass(mediaControls, 'media-controls')\n        .firstChild;\n      let playPath = gPath.lastChild;\n      let pausePath = gPath.firstElementChild;\n\n      mediaControls.classList.toggle('media-controls-toggle');\n      playPath.classList.toggle('play-ani');\n      pausePath.classList.toggle('pause-ani');\n    }\n    if (targetedElement.classList.contains('playlist-track__progress-bar')) {\n      console.dir(targetedElement);\n      let grandparentTarget = targetedElement.parentNode.parentNode;\n      let trackMedia = getChildElementByClass(\n        grandparentTarget,\n        'playlist-track__media'\n      );\n      let mediaControls = getChildElementByClass(trackMedia, 'media-controls');\n      let gPath = getChildElementByClass(mediaControls, 'media-controls')\n        .firstChild;\n      let playPath = gPath.lastChild;\n      let pausePath = gPath.firstElementChild;\n\n      playPath.classList.toggle('play-ani');\n      pausePath.classList.toggle('pause-ani');\n    }\n  }\n}\n\n// Takes a String as an argument for Import Modal Error Message\nfunction createImportError(errorMessage) {\n  let errorBody = document.createElement('span');\n  let contentBox = document.querySelector('.tab-content-container');\n  let inputHook = document.querySelector('.im-pl__name');\n\n  contentBox.classList.add('tab-content--error');\n  errorBody.classList.add('im-pl__error');\n\n  errorBody.textContent = errorMessage;\n  // contentBox.classList.toggle('no-transform');\n\n  inputHook.parentNode.insertBefore(errorBody, inputHook.nextElementSibling);\n}\n\n// Make Song URI into URI format\nfunction processSongURI(uri) {\n  var reg = /\\w+:/g;\n  let trackURI = uri.replace(reg, '');\n\n  return trackURI;\n}\n\n// GET Request to Spotify API\nfunction spotifyGrab(url) {\n  const init = {\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + myModule.accessToken\n    }\n  };\n\n  let spotifyData = fetch(url, init);\n  return spotifyData;\n}\n\n// DELETE Request to Spotify API\nfunction deleteSong(url, track) {\n  let data = {\n    tracks: [\n      {\n        uri: track\n      }\n    ]\n  };\n\n  const init = {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + myModule.accessToken\n    },\n    body: JSON.stringify(data)\n  };\n\n  let spotifyData = fetch(url, init);\n  return spotifyData;\n}\n\n// Fetch to Spotify API...\nfunction spotifyProcessTracks(url) {\n  spotifyGrab(url).then(response => {\n    response\n      .json()\n      .then(data => {\n        if (data.tracks.length === 0) {\n          noTrackResult();\n          // smoothingScroll('.no-result');\n          return -1;\n        }\n\n        data.tracks.forEach(track => {\n          // Check if song is already in the DOM\n          if (myModule.currentTracks.length > 0) {\n            for (let i = 0; i < myModule.currentTracks.length; i++) {\n              if (track.album.name === myModule.currentTracks[i].album_name)\n                return;\n            }\n          }\n\n          if (track.preview_url && track.album.images[1] && track.uri) {\n            let newTrack = {\n              album_name: track.album.name,\n              album_img: track.album.images[1],\n              artist: track.artists[0].name,\n              preview_url: track.preview_url,\n              song_title: track.name,\n              trackID: track.id,\n              uri: track.uri\n            };\n\n            createSongBody(newTrack);\n            myModule.currentTracks.push(newTrack);\n          }\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  });\n}\n\n// Retrieve Playlist ID from Total Playlists\nfunction getPlaylistID(playlistName) {\n  let playlistID;\n  for (let k in myModule.totalPlaylists) {\n    if (playlistName === myModule.totalPlaylists[k].name) {\n      playlistID = myModule.totalPlaylists[k].id;\n    }\n  }\n  return playlistID;\n}\n\n// Remove Playlist from Total Playlist\nfunction removeFromTotalPlaylists(name) {\n  let playlistID = getPlaylistID(name);\n  let index = playlistAlreadyExistCheck(playlistID);\n  myModule.totalPlaylists.splice(index, 1);\n  updatePlaylistCount();\n}\n\n// Playlist Exists in Total Playlist\nfunction playlistAlreadyExistCheck(playlistID) {\n  for (let property in myModule.totalPlaylists) {\n    if (myModule.totalPlaylists[property].id === playlistID) {\n      return myModule.totalPlaylists.indexOf(myModule.totalPlaylists[property]);\n    }\n  }\n}\n\n// Push to Total Playlists // Change index to exists??\nfunction updateTotalPlaylists(name, id) {\n  if (!id) {\n    return;\n  }\n  let exists;\n  let playlist = {\n    name: name,\n    id: id\n  };\n\n  let index = playlistAlreadyExistCheck(id);\n\n  if (index === undefined) {\n    myModule.totalPlaylists.push(playlist);\n    updatePlaylistCount();\n    exists = false;\n    return exists;\n  } else {\n    exists = true;\n    return exists;\n  }\n}\n\n// Update Playlist Footer Count\nfunction updatePlaylistCount() {\n  const playlistAmount = document.querySelector('.playlist-amount');\n  playlistAmount.textContent = myModule.totalPlaylists.length;\n}\n\n// POST Request to Spotify API\nfunction spotifyCreatePlaylist(url) {\n  let data = {\n    description:  false || document.querySelector('.cr-pl__description').value,\n    public: true,\n    name: document.querySelector('.cr-pl__name').value\n  };\n\n  const init = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + myModule.accessToken\n    },\n    body: JSON.stringify(data)\n  };\n\n  fetch(url, init)\n    .then(data => {\n      return data.json();\n    })\n    .then(createdPlaylist => {\n      let crPlName = document.querySelector('.cr-pl__name');\n      let crPlDescription = document.querySelector('.cr-pl__description');\n\n      updateTotalPlaylists(createdPlaylist.name, createdPlaylist.id);\n      playlistPlate(createdPlaylist.name, createdPlaylist.id);\n\n      crPlName.value = '';\n      crPlDescription.value = '';\n\n      // If there are songs in the queue add them to the newly created playlist\n      if (myModule.songQueue.length > 0) {\n        addSongToPlaylist(\n          `https://api.spotify.com/v1/users/${myModule.userInfo.id}/playlists/${\n            createdPlaylist.id\n          }/tracks`,\n          myModule.songQueue,\n          createdPlaylist.id\n        );\n      }\n\n      confirmAction(createdPlaylist.name, 'create');\n    })\n    .catch(err => {\n      console.log(err);\n    });\n}\n\nfunction getChildElementByClass(element, className) {\n  // Check if element already contains class\n  if (element.classList.contains(className)) {\n    return element;\n  } else {\n    let elementChildren = element.childNodes;\n\n    for (let i = 0; i < elementChildren.length; i++) {\n      if (elementChildren[i].classList.contains(className)) {\n        return elementChildren[i];\n      }\n\n      // getChildElementByClass(elementChildren[i], className);\n\n      // for(let j = i; j < elementChildren.length; j++){\n      //     getChildElementByClass(elementChildren[i], className);\n      // }\n    }\n  }\n  // If no element by that class is found\n  // return undefined;\n}\n\n// Playlist Template\nfunction playlistPlate(name, id) {\n  const playlistList = document.querySelector('.playlist-list');\n  const playlistDiv = document.createElement('div');\n  const trackWrapper = document.createElement('div');\n  const playlistName = document.createElement('h4');\n  const removePlaylist = document.createElement('span');\n  let currentShownPlaylist = document.querySelector(\n    '.playlist-list__playlist--show'\n  );\n\n  let caretDrop = document.createElement('span');\n  // caretDrop.innerHTML = '<i class=\"fas fa-caret-right no-transform\"></i>'\n  caretDrop.innerHTML = '<i class=\"fas fa-chevron-right no-animation\"></i>';\n\n  // playlistDiv.textContent = name;\n  playlistName.textContent = name;\n  // removePlaylist.textContent = 'x';\n\n  playlistDiv.classList.add('playlist-list__playlist');\n  playlistName.classList.add('playlist-list__name');\n  caretDrop.classList.add('playlist-list__caret-container');\n  trackWrapper.classList.add('track-wrapper');\n  removePlaylist.classList.add('remove-playlist');\n\n  if (currentShownPlaylist) {\n    playlistDiv.classList.add('playlist-list__playlist--hide');\n  }\n\n  playlistDiv.setAttribute('data-playlist-id', id);\n\n  // playlistDiv.style.backgroundColor = playlistColorSequence();\n\n  myModule.currentChosenPlaylist.name = name;\n  myModule.currentChosenPlaylist.id = id;\n\n  playlistList.appendChild(playlistDiv);\n  playlistDiv.appendChild(playlistName);\n  playlistName.appendChild(caretDrop);\n  playlistDiv.appendChild(trackWrapper);\n  playlistDiv.appendChild(removePlaylist); // Unsure may break code\n\n  playlistColorSequence();\n}\n\nfunction confirmAction(playlistName, source) {\n  let confirmationContainer = document.createElement('div');\n  let confirmationInfo = document.createElement('h1');\n\n  confirmationContainer.innerHTML = `<svg class=\"confirm-action-checkmark\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 52 52\"><circle class=\"confirm-action-checkmark__circle\" cx=\"26\" cy=\"26\" r=\"25\" fill=\"none\"/><path class=\"confirm-actioncheckmark__check\" fill=\"none\" d=\"M14.1 27.2l7.1 7.2 16.7-16.8\"/></svg>`;\n\n  confirmationContainer.classList.add('confirm-action');\n  confirmationContainer.classList.add('confirm-action--fade');\n\n  // tranModalContent.classList.add('confirm-song--fade');\n  confirmationInfo.classList.add('confirm-action__info');\n\n  if (source === 'song') {\n    confirmationInfo.textContent = `Added to \"${playlistName}\"`;\n  }\n\n  if (source === 'create') {\n    confirmationInfo.textContent = `Created \"${playlistName}\"`;\n  }\n\n  if (source === 'import') {\n    confirmationInfo.textContent = `Imported \"${playlistName}\"`;\n  }\n\n  document.body.appendChild(confirmationContainer);\n  confirmationContainer.appendChild(confirmationInfo);\n\n  setTimeout(function() {\n    removeElementFromDOM(confirmationContainer);\n  }, 2000);\n}\n\nfunction addSongToPlaylist(url, songLinks, playlistID) {\n  let data = {\n    uris: songLinks\n  };\n  const init = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + myModule.accessToken\n    },\n    body: JSON.stringify(data)\n  };\n\n  // Add song(s) to playlist\n  fetch(url, init)\n    .then(response => {\n      while (myModule.songQueue.length > 0) {\n        myModule.songQueue.pop();\n      }\n      return response.json();\n    })\n    .then(() => {\n      // Get back updated playlist\n      spotifyGrab(\n        `https://api.spotify.com/v1/users/${\n          myModule.userInfo.id\n        }/playlists/${playlistID}/tracks`\n      )\n        .then(playlist => {\n          return playlist.json();\n        })\n        .then(updatedPlaylist => {\n          refreshPlaylistBody(myModule.currentChosenPlaylist.name);\n\n          updatedPlaylist.items.forEach(playlistSong => {\n            createPlaylistTrackBody(playlistSong);\n          });\n          confirmAction(myModule.currentChosenPlaylist.name, 'song');\n        });\n    })\n    .catch(err => {\n      console.log(err);\n    });\n}\n\nfunction smoothingScroll(elementName) {\n  window.scrollTo({\n    top: 500,\n    left: 0,\n    behavior: 'smooth'\n  });\n\n  // Scroll certain amounts from current position\n  window.scrollBy({\n    top: 100, // could be negative value\n    left: 0,\n    behavior: 'smooth'\n  });\n\n  // Scroll to a certain element\n  document.querySelector(elementName).scrollIntoView({\n    behavior: 'smooth',\n    block: 'start'\n  });\n}\n\n// Create DOM structure from Fetched songs\nfunction createSongBody(trackObj) {\n  const div = document.createElement('div');\n  const img = document.createElement('img');\n  // const trackLink = document.createElement('a');\n  const headings = {\n    h1: document.createElement('h1'),\n    h2: document.createElement('h2')\n  };\n  const playlistAddBtn = document.createElement('div');\n  const getDiv = document.querySelector('.tracks');\n  const progressBar = document.createElement('div');\n  const trackLink = document.createElement('audio');\n  const playerControl = document.createElement('div');\n\n  playerControl.classList.add('track__media');\n\n  playerControl.innerHTML =\n    '<svg class=\"media-controls\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"100\" viewBox=\"0 0 100 100\"><g fill=\"none\" fill-rule=\"evenodd\"><path class=\"media-controls__pause inactive-dash-pause\" stroke=\"#3F3E3E\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"5\" d=\"M48,25 L48,71.8053097 C45.1666667,73.6017699 42.3333333,74.5 39.5,74.5 C36.6666667,74.5 33.8333333,73.6017699 31,71.8053097\"/><path class=\"media-controls__play inactive-dash\" stroke-linecap=\"round\" stroke=\"#3F3E3E\" stroke-width=\"5\" d=\"M72.0763886,68.3352333 L62.1474475,68.3352333 L27.2723011,68.3352333 C25.0631621,68.3352333 23.2723011,66.5443723 23.2723011,64.3352333 C23.2723011,63.4859068 23.542644,62.6586256 24.0441798,61.9731933 L46.4462236,31.3570669 C47.7507422,29.5742247 50.2535427,29.1864669 52.0363849,30.4909855 C52.3678287,30.7335054 52.6599463,31.025623 52.9024662,31.3570669 L75.3045099,61.9731933 C76.6090286,63.7560355 76.2212708,66.258836 74.4384286,67.5633546 C73.7529963,68.0648904 72.9257152,68.3352333 72.0763886,68.3352333 L68.7548694,68.3352333\" transform=\"rotate(90 49.674 49.027)\"/></g></svg>';\n\n  // Setting up classes\n  trackLink.classList.add('track__link');\n  div.classList.add('track');\n  img.classList.add('track__img');\n  headings.h1.classList.add('track__name');\n  headings.h2.classList.add('track__arist');\n\n  playlistAddBtn.classList.add('track__pl-add', 'cr-pl__btn');\n  // progressBar.classList.add('track__progress');\n  playerControl.classList.add('track__media');\n\n  // Setting DOM display\n  // trackLink.setAttribute('href', trackObj.preview_url);\n  trackLink.src = trackObj.preview_url;\n\n  img.src = trackObj.album_img.url;\n  img.setAttribute(\n    'alt',\n    `Artwork for the song \"${trackObj.song_title}\", from ${trackObj.artist}`\n  );\n  headings.h1.textContent = trackObj.song_title;\n  headings.h2.textContent = trackObj.artist;\n\n  // Attach to DOM\n  getDiv.appendChild(div);\n  div.appendChild(img);\n  img.appendChild(trackLink);\n  // div.appendChild(progressBar);\n  div.appendChild(playerControl);\n  div.appendChild(headings.h1);\n  // div.appendChild(headings.h4);\n  div.appendChild(headings.h2);\n  div.appendChild(playlistAddBtn);\n\n  // let progressBar = document.createElement('div');\n  progressBar.classList.add('track__progress-bar');\n\n  let volumeIcon = document.createElement('i');\n  const volumeContainer = document.createElement('div');\n  const volumeSlider = document.createElement('input');\n\n  volumeSlider.setAttribute('type', 'range');\n  volumeSlider.setAttribute('min', '1');\n  volumeSlider.setAttribute('max', '100');\n  volumeSlider.setAttribute('value', '60');\n  playlistAddBtn.setAttribute('data-track-uri', trackObj.uri);\n\n  volumeContainer.classList.add('track__volume-container');\n  volumeSlider.classList.add('track__volume-slider');\n  volumeIcon.classList.add('track__volume-icon');\n\n  volumeIcon.className = 'fas fa-volume-up';\n\n  volumeContainer.appendChild(volumeIcon);\n  volumeContainer.appendChild(volumeSlider);\n\n  playerControl.insertAdjacentElement('afterbegin', progressBar);\n  playerControl.insertAdjacentElement('beforeend', volumeContainer);\n\n  playlistAddBtn.innerHTML =\n    '<svg class=\"track__svg-add-btn\" xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\" viewBox=\"0 0 100 100\"><g fill=\"none\" fill-rule=\"evenodd\"><circle cx=\"50\" cy=\"50\" r=\"50\" fill=\"#469B6E\"/><g fill=\"#FFF\" transform=\"translate(25.926 25.926)\"><rect width=\"11.111\" height=\"48.148\" x=\"18.519\" rx=\"5\" transform=\"rotate(-90 24.074 24.074)\"/><rect width=\"11.111\" height=\"48.148\" x=\"18.519\" rx=\"5\"/></g></g></svg>';\n\n  // Preview Songs change to add an   event\n  let audioTrack = new Audio(trackLink.href);\n  trackLink.addEventListener('click', evt => {\n    evt.preventDefault();\n\n    audioTrack.paused ? audioTrack.play() : audioTrack.pause();\n  });\n\n  // Reset the count for Scrolling Fetch\n  myModule.scrollCount = 0;\n  console.log(myModule.scrollCount, `inside tracks div`);\n\n  img.addEventListener('click', evt => {\n    let parentOfTarget = evt.target.parentElement;\n    // make this into a function, also used in advance function for progress bar\n    let trackMedia = getChildElementByClass(parentOfTarget, 'track__media');\n    let mediaControls = getChildElementByClass(trackMedia, 'media-controls');\n    let gPath = getChildElementByClass(mediaControls, 'media-controls')\n      .firstChild;\n    let playPath = gPath.lastChild;\n    let pausePath = gPath.firstElementChild;\n\n    playPath.classList.remove('inactive-dash');\n    pausePath.classList.remove('inactive-dash-pause');\n\n    playPath.classList.toggle('play-ani');\n    pausePath.classList.toggle('pause-ani');\n    mediaControls.classList.toggle('media-controls-toggle');\n\n    evt.target.firstElementChild.paused\n      ? evt.target.firstElementChild.play()\n      : evt.target.firstElementChild.pause();\n  });\n\n  playerControl.addEventListener('click', evt => {\n    // refactor into track event listener\n    if (evt.target.classList.contains('media-controls')) {\n      let gSVG = evt.target.firstChild;\n      let pausePath = gSVG.firstChild;\n      let playPath = gSVG.lastChild;\n      // let mediaControlsTarget = evt.target\n\n      playPath.classList.remove('inactive-dash');\n      pausePath.classList.remove('inactive-dash-pause');\n\n      playPath.classList.toggle('play-ani');\n      pausePath.classList.toggle('pause-ani');\n      evt.target.classList.toggle('media-controls-toggle');\n\n      let audioTrack = Array.from(\n        evt.target.parentElement.parentElement.children\n      );\n\n      audioTrack.forEach(child => {\n        if (child.className === 'track__img') {\n          let songAudio = child.firstChild;\n          songAudio.paused ? songAudio.play() : songAudio.pause();\n        }\n      });\n    }\n  });\n\n  // Add tracks to playlist\n  playlistAddBtn.addEventListener('click', evt => {\n    // let addedSong = [getSongURI(evt.target)];\n    let addedSong = evt.target.getAttribute('data-track-uri');\n    let crImPlaylistModal = document.querySelector('.modal');\n    const createTab = document.getElementById('cr-pl-tab');\n    createTab.checked = true;\n\n    if (myModule.totalPlaylists.length === 0) {\n      let queuedSong = addedSong;\n      myModule.songQueue.push(queuedSong);\n\n      // Pop out Playlist create modal..change to toggle class\n\n      crImPlaylistModal.classList.toggle('modal--show');\n    } else if (myModule.totalPlaylists.length === 1) {\n      myModule.currentChosenPlaylist.name = myModule.totalPlaylists[0].name;\n      myModule.currentChosenPlaylist.id = myModule.totalPlaylists[0].id;\n\n      addSongToPlaylist(\n        `https://api.spotify.com/v1/users/${myModule.userInfo.id}/playlists/${\n          myModule.currentChosenPlaylist.id\n        }/tracks`,\n        [addedSong],\n        myModule.currentChosenPlaylist.id\n      );\n    } else {\n      addSongToPlaylist(\n        `https://api.spotify.com/v1/users/${myModule.userInfo.id}/playlists/${\n          myModule.currentChosenPlaylist.id\n        }/tracks`,\n        [addedSong],\n        myModule.currentChosenPlaylist.id\n      );\n    }\n  });\n\n  trackLink.addEventListener('playing', evt => {\n    let song = evt.target;\n\n    let duration = song.duration;\n    let parentOfEvent = song.parentElement.parentElement;\n    let progressBar = getChildElementByClass(parentOfEvent, 'track__media')\n      .firstElementChild;\n\n    advance(duration, trackLink, progressBar);\n  });\n}\n\n// Need to see what can be refactored from this and createSongBody function\nfunction createPlaylistTrackBody(playlistObj, importedPlaylistName) {\n  const playlistTrackDiv = document.createElement('div');\n  const playerControl = document.createElement('div');\n  const img = document.createElement('img');\n  const trackLink = document.createElement('audio');\n  const headings = {\n    h1: document.createElement('h1'),\n    h2: document.createElement('h2'),\n    h4: document.createElement('h4')\n  };\n  const playlistBodyContainer = document.createElement('div');\n\n  // Dropdown for playlist\n  const options = document.createElement('div');\n  const optionsDropdown = document.createElement('div');\n  const playBtn = document.createElement('a');\n\n  const songInfoContainer = document.createElement('div');\n  const goToLink = document.createElement('a');\n  const moveToAPlaylist = document.createElement('a');\n  const deleteTrack = document.createElement('a');\n\n  let userChosenPlaylist;\n  let playlistNameBar = document.querySelectorAll('.playlist-list__playlist');\n\n  let newPlaylistTrack = {\n    album_name: playlistObj.track.album.name,\n    album_img: playlistObj.track.album.images[1],\n    artist: playlistObj.track.artists[0].name,\n    preview_url: playlistObj.track.preview_url,\n    song_title: playlistObj.track.name,\n    trackID: playlistObj.track.id,\n    uri: playlistObj.track.uri\n  };\n\n  if (newPlaylistTrack.preview_url !== null) {\n    trackLink.src = newPlaylistTrack.preview_url;\n  }\n\n  playlistNameBar.forEach(childElement => {\n    if (importedPlaylistName) {\n      if (childElement.childNodes[0].textContent === importedPlaylistName) {\n        userChosenPlaylist = getChildElementByClass(\n          childElement,\n          'track-wrapper'\n        );\n      }\n    } else if (\n      childElement.childNodes[0].textContent ===\n      myModule.currentChosenPlaylist.name\n    ) {\n      userChosenPlaylist = getChildElementByClass(\n        childElement,\n        'track-wrapper'\n      );\n    }\n  });\n\n  // If user made requests to add songs without a playlist, this will point to the first playlist.\n  if (userChosenPlaylist === undefined) {\n    userChosenPlaylist = getChildElementByClass(\n      playlistNameBar[0],\n      'track-wrapper'\n    );\n  }\n\n  // Setting up classes\n  trackLink.classList.add('playlist-track__link');\n  playlistTrackDiv.classList.add('playlist-track'); // 'playlist-track',\n  img.classList.add('playlist-track__img');\n  songInfoContainer.classList.add('playlist-track__song-info-container');\n  headings.h1.classList.add('playlist-track__name');\n  headings.h2.classList.add('playlist-track__arist');\n  headings.h4.classList.add('playlist-track__album');\n  playlistBodyContainer.classList.add('playlist-track__body-container');\n  playBtn.classList.add('playlist-track__play-btn');\n\n  // Dropdown Options Classes\n  options.classList.add('options');\n  optionsDropdown.classList.add('options-dropdown');\n  goToLink.classList.add('options-dropdown__link', 'go-to-link');\n  moveToAPlaylist.classList.add('options-dropdown__link', 'move-song');\n  deleteTrack.classList.add('options-dropdown__link', 'delete-modal-trigger');\n\n  // Setting DOM display\n  let spotifyURL = 'https://open.spotify.com/track/';\n  goToLink.setAttribute(\n    'href',\n    `${spotifyURL}${processSongURI(newPlaylistTrack.uri)}`\n  );\n  goToLink.setAttribute('target', '_blank');\n  trackLink.setAttribute('href', newPlaylistTrack.preview_url);\n  playBtn.setAttribute('href', newPlaylistTrack.preview_url);\n  playlistTrackDiv.setAttribute('data-spotify-track', newPlaylistTrack.uri);\n\n  img.src = newPlaylistTrack.album_img.url;\n\n  headings.h1.textContent = newPlaylistTrack.song_title;\n  headings.h2.textContent = newPlaylistTrack.artist;\n\n  // Dropdown Options Text\n  goToLink.textContent = 'Go to song link';\n  moveToAPlaylist.textContent = 'Move song to another playlist';\n  deleteTrack.textContent = 'Delete track';\n\n  options.textContent = '\\u2026';\n\n  // Play-Pause SVG\n  if (trackLink.src) {\n    playerControl.classList.add('playlist-track__media');\n\n    playerControl.innerHTML =\n      '<svg class=\"media-controls\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"100\" viewBox=\"0 0 100 100\"><g fill=\"none\" fill-rule=\"evenodd\"><path class=\"media-controls__pause inactive-dash-pause\" stroke=\"#3F3E3E\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"5\" d=\"M48,25 L48,71.8053097 C45.1666667,73.6017699 42.3333333,74.5 39.5,74.5 C36.6666667,74.5 33.8333333,73.6017699 31,71.8053097\"/><path class=\"media-controls__play inactive-dash\" stroke-linecap=\"round\" stroke=\"#3F3E3E\" stroke-width=\"5\" d=\"M72.0763886,68.3352333 L62.1474475,68.3352333 L27.2723011,68.3352333 C25.0631621,68.3352333 23.2723011,66.5443723 23.2723011,64.3352333 C23.2723011,63.4859068 23.542644,62.6586256 24.0441798,61.9731933 L46.4462236,31.3570669 C47.7507422,29.5742247 50.2535427,29.1864669 52.0363849,30.4909855 C52.3678287,30.7335054 52.6599463,31.025623 52.9024662,31.3570669 L75.3045099,61.9731933 C76.6090286,63.7560355 76.2212708,66.258836 74.4384286,67.5633546 C73.7529963,68.0648904 72.9257152,68.3352333 72.0763886,68.3352333 L68.7548694,68.3352333\" transform=\"rotate(90 49.674 49.027)\"/></g></svg>';\n  }\n\n  let progressBar = document.createElement('div');\n  progressBar.classList.add('playlist-track__progress-bar');\n\n  progressBar.style.backgroundColor = document.body.style.backgroundColor;\n\n  const volumeContainer = document.createElement('div');\n  const volumeSlider = document.createElement('input');\n  let volumeIcon = document.createElement('i');\n  volumeIcon.classList.add('track__volume-icon');\n\n  volumeIcon.className = 'fas fa-volume-up';\n\n  volumeContainer.appendChild(volumeIcon);\n\n  volumeSlider.setAttribute('type', 'range');\n  volumeSlider.setAttribute('min', '1');\n  volumeSlider.setAttribute('max', '100');\n  volumeSlider.setAttribute('value', '60');\n\n  volumeContainer.classList.add('playlist-track__volume-container');\n  volumeSlider.classList.add('playlist-track__volume-slider');\n\n  // Attach to DOM\n  userChosenPlaylist.appendChild(playlistTrackDiv);\n  playlistTrackDiv.appendChild(img);\n  img.appendChild(trackLink);\n  playlistTrackDiv.appendChild(playlistBodyContainer);\n  playlistBodyContainer.appendChild(songInfoContainer);\n  songInfoContainer.appendChild(headings.h1);\n  songInfoContainer.appendChild(headings.h2);\n  playlistTrackDiv.appendChild(playerControl);\n  playlistTrackDiv.appendChild(options);\n  // playlistTrackDiv.appendChild(progressBar);\n\n  volumeContainer.appendChild(volumeSlider);\n\n  playlistBodyContainer.insertAdjacentElement('afterbegin', progressBar);\n  playlistBodyContainer.insertAdjacentElement('beforeend', volumeContainer);\n\n  // Append Options Dropdown to Playlist Track\n  options.appendChild(optionsDropdown);\n  optionsDropdown.appendChild(goToLink);\n  optionsDropdown.appendChild(moveToAPlaylist);\n  optionsDropdown.appendChild(deleteTrack);\n\n  // Preview Songs... set up in tracks div\n  // let audioTrack = new Audio(trackLink.href);\n\n  img.addEventListener('click', evt => {\n    let playlistTrack = Array.from(evt.target.parentElement.children);\n\n    playlistTrack.forEach(child => {\n      if (child.className === 'playlist-track__media') {\n        let playSVG = child.firstChild;\n        let pausePath = playSVG.firstChild.firstChild;\n        let playPath = playSVG.firstChild.lastChild;\n\n        playPath.classList.remove('inactive-dash');\n        pausePath.classList.remove('inactive-dash-pause');\n\n        playPath.classList.toggle('play-ani');\n        pausePath.classList.toggle('pause-ani');\n      }\n    });\n\n    evt.target.firstElementChild.paused\n      ? evt.target.firstElementChild.play()\n      : evt.target.firstElementChild.pause();\n  });\n\n  playerControl.addEventListener('click', evt => {\n    let gSVG = evt.target.firstChild;\n    let pausePath = gSVG.firstChild;\n    let playPath = gSVG.lastChild;\n\n    playPath.classList.remove('inactive-dash');\n    pausePath.classList.remove('inactive-dash-pause');\n\n    playPath.classList.toggle('play-ani');\n    pausePath.classList.toggle('pause-ani');\n\n    let audioTrack = Array.from(\n      evt.target.parentElement.parentElement.children\n    );\n\n    audioTrack.forEach(child => {\n      if (child.className === 'playlist-track__img') {\n        let songAudio = child.firstChild;\n        songAudio.paused ? songAudio.play() : songAudio.pause();\n      }\n    });\n  });\n\n  trackLink.addEventListener('playing', evt => {\n    let song = evt.target;\n\n    let duration = song.duration;\n    let parentOfEvent = song.parentElement.parentElement;\n    let progressBarParent = getChildElementByClass(\n      parentOfEvent,\n      'playlist-track__body-container'\n    );\n    let progressBar = getChildElementByClass(\n      progressBarParent,\n      'playlist-track__progress-bar'\n    );\n\n    advance(duration, trackLink, progressBar);\n  });\n}\n\nfunction songVolume(element) {\n  let sliderValue = element.value;\n  let songParentElement =\n    element.parentElement.parentElement.parentElement.firstChild;\n  let song =\n    getChildElementByClass(songParentElement, 'playlist-track__link') ||\n    getChildElementByClass(songParentElement, 'track__link');\n\n  sliderValue = sliderValue / 100;\n\n  // Change volume slider icon. Doesn't work in Safari.\n  // if(sliderValue < 0.4){\n  //     let volumeIcon = element.parentElement.firstElementChild;\n  //     // volumeIcon.innerHTML = '<i class=\"fas fa-volume-down\"></i>';\n\n  // }\n  // if(sliderValue > 0.4){\n  //     let volumeIcon = element.parentElement.firstElementChild;\n  //     // volumeIcon.innerHTML = '<i class=\"fas fa-volume-up\"></i>';\n  // }\n  song.volume = sliderValue;\n}\n\n// For songs that are in the body\n// !!! Delete\n// function getSongURI(evt) {\n//   songReference = evt.parentElement.getElementsByTagName('a')[0].href;\n//   let addedSong;\n//   for (let k in myModule.currentTracks) {\n//     if (myModule.currentTracks[k].preview_url === songReference)\n//       addedSong = myModule.currentTracks[k].uri;\n//   }\n//   return addedSong;\n// }\n\n// !!! Delete\n// Play songs fetched from Spotify\n// function playSound(url) {\n//   var a = new Audio(url);\n//   a.play();\n// }\n\nfunction refreshPlaylistBody(playlistName) {\n  let updateThisPlaylist;\n  let trackWrapper = Array.from(\n    document.getElementsByClassName('track-wrapper')\n  );\n\n  trackWrapper.forEach(wrapper => {\n    if (wrapper.parentElement.childNodes[0].textContent === playlistName) {\n      updateThisPlaylist = wrapper;\n    }\n  });\n\n  // This is for dealing with the DOM's live list\n  for (let i = updateThisPlaylist.children.length; i--; ) {\n    updateThisPlaylist.children[i].remove();\n  }\n}\n\n// Move a Song to Another Playlist -- *** REFACTOR**\nfunction moveSongFromPlaylist(url, songLinks, playlistID) {\n  let data = {\n    uris: songLinks\n  };\n  const init = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + myModule.accessToken\n    },\n    body: JSON.stringify(data)\n  };\n\n  // Add song to playlist\n  let spotifyData = fetch(url, init)\n    .then(response => {\n      return response.json();\n    })\n    .then(() => {\n      // Get back updated playlist\n      spotifyGrab(\n        `https://api.spotify.com/v1/users/${\n          myModule.userInfo.id\n        }/playlists/${playlistID}/tracks`\n      )\n        .then(playlist => {\n          return playlist.json();\n        })\n        .then(movedPlaylist => {\n          refreshPlaylistBody(myModule.playlistNameValue);\n\n          movedPlaylist.items.forEach(playlistSong => {\n            createPlaylistTrackBody(playlistSong, myModule.playlistNameValue);\n          });\n        });\n    })\n    .catch(err => {\n      console.log(err);\n    });\n  return spotifyData;\n}\n\nfunction removeElementFromDOM(element) {\n  element.parentNode.removeChild(element);\n}\n\nfunction moodSubmitCleanUp() {\n  const tracksDiv = document.querySelector('.tracks');\n  const genresFilterTab = document.querySelector('.genres-filter-tab__list');\n  const moodFilterTab = document.querySelector('.genres-search-filter-genre');\n  const noResult = document.querySelector('.no-result');\n\n  // Delete previous entries inside track div\n  while (tracksDiv.firstChild) {\n    tracksDiv.removeChild(tracksDiv.firstChild);\n  }\n\n  // Delete chosen genres under search bar\n  while (moodFilterTab.firstChild) {\n    moodFilterTab.removeChild(moodFilterTab.firstChild);\n  }\n\n  // Delete chosen genres from genre\n  while (genresFilterTab.firstChild) {\n    genresFilterTab.removeChild(genresFilterTab.firstChild);\n  }\n\n  if (noResult) {\n    removeElementFromDOM(noResult);\n  }\n}\n\nfunction cleanUpGenres() {\n  let genresChosen = Array.from(document.querySelectorAll('.genres-toggle'));\n  let storeGenres = [];\n  const regForGenres = /&/g;\n  const genresToggleEvent = document.querySelector('.genres-show');\n  // let genreToggleEvent = getChildElementByClass(genresDiv, 'genres-show');\n\n  if (genresToggleEvent) {\n    genresToggleEvent.classList.toggle('genres-show');\n  }\n\n  genresChosen.forEach(genre => {\n    let genreName = genre.textContent.toLowerCase();\n    if (genreName === 'r & b' || genreName === 'rock & roll') {\n      genreName = genre.textContent.replace(regForGenres, 'n').toLowerCase();\n    }\n    if (genreName === 'drum & bass') {\n      genreName = genre.textContent.replace(regForGenres, 'and').toLowerCase();\n    }\n\n    genre.classList.remove('genres-toggle');\n    genreName = genreName.replace(/ /g, '-');\n    storeGenres.push(genreName);\n  });\n\n  return storeGenres;\n}\n\nfunction buildURL(genres, maxVal, minVal, dataFeatures) {\n  let url = `https://api.spotify.com/v1/recommendations?max_valence=${maxVal}&min_valence=${minVal}&limit=30`;\n\n  if (dataFeatures[0].hasOwnProperty('minEnergy')) {\n    url += `&min_energy=${dataFeatures[0].minEnergy}`;\n  }\n  if (dataFeatures[0].hasOwnProperty('maxEnergy')) {\n    url += `&max_energy=${dataFeatures[0].maxEnergy}`;\n  }\n\n  function urlGenerate() {\n    let newUrl = handleGenres(url, genres);\n    return newUrl;\n  }\n\n  return urlGenerate;\n}\n\n// Get username\nspotifyGrab('https://api.spotify.com/v1/me')\n  .then(data => {\n    // Check if user is logged into their account\n    if (data.status === 401) {\n      window.location.href = '/login';\n    }\n\n    data.json().then(jsonData => {\n      let username = document.getElementById('username');\n      jsonData.display_name\n        ? (username.textContent = jsonData.display_name)\n        : (username.textContent = jsonData.id);\n\n      // Copy Spotify User Info\n      for (let i in jsonData) {\n        myModule.userInfo[i] = jsonData[i];\n      }\n    });\n  })\n  .catch(err => {\n    let content = document.querySelector('.content-wrapper');\n    let loginLink = document.createElement('a');\n\n    // content.removeChild(content.firstChild);\n    while (content.firstChild) {\n      content.removeChild(content.firstChild);\n    }\n\n    loginLink.setAttribute('href', 'login.html');\n    loginLink.textContent = `login here!`;\n\n    document.body.appendChild(loginLink);\n\n    {\n      /* <a href=\"login.html\">hey</a> */\n    }\n    console.log(err);\n  });\n\n/******* Window Events *******/\n\n// Song Volume\nwindow.addEventListener('mouseup', evt => {\n  if (evt.target.classList.contains('playlist-track__volume-slider')) {\n    songVolume(evt.target);\n  }\n  if (evt.target.classList.contains('track__volume-slider')) {\n    songVolume(evt.target);\n  }\n});\nwindow.addEventListener('input', evt => {\n  if (evt.target.classList.contains('playlist-track__volume-slider')) {\n    songVolume(evt.target);\n  }\n  if (evt.target.classList.contains('track__volume-slider')) {\n    songVolume(evt.target);\n  }\n});\n\n// When the user clicks anywhere outside of the modal, close it\nwindow.addEventListener('click', evt => {\n  let tranModal = document.querySelector('.tran-modal');\n  let crImPlaylistModal = document.querySelector('.modal');\n  let genres = document.querySelector('.genres-show');\n  let genreModal = document.querySelector('.tran-modal--genre');\n\n  // Creating/Importing a playlist modal view\n  if (evt.target == crImPlaylistModal) {\n    let tabContentContainer = document.querySelector('.tab-content-container');\n    let errorMess = document.querySelector('.im-pl__error');\n\n    crImPlaylistModal.classList.toggle('modal--show');\n    tabContentContainer.classList.remove('tab-content--error');\n\n    if (errorMess) {\n      removeElementFromDOM(errorMess);\n    }\n  }\n\n  // Move playlist modal view\n  if (evt.target === tranModal) {\n    closeModal();\n  }\n\n  if (evt.target === genreModal) {\n    closeModal();\n  }\n  if (evt.target.classList.contains('tran-modal--genre')) {\n    closeModal();\n  }\n\n  // More Options on playlist Tracks\n  if (evt.target !== myModule.optionsHelper) {\n    let dropdowns = document.getElementsByClassName('options-dropdown');\n\n    for (let i = 0; i < dropdowns.length; i++) {\n      dropdowns[i].classList.remove('show__elem');\n    }\n  }\n  if (evt.target !== genres) {\n    let genreAnimation = document.querySelector('.genres-active-animation');\n\n    if (genreAnimation) {\n      genreAnimation.classList.remove('genres-active-animation');\n      genres.classList.remove('genres-show');\n    }\n  }\n});\n\n/******* Modal Window & Mood Submit Events *******/\n\n// Creating a new playlist\neventModule.createPlaylistSubmit.addEventListener('submit', evt => {\n  evt.preventDefault();\n\n  spotifyCreatePlaylist(\n    `https://api.spotify.com/v1/users/${myModule.userInfo.id}/playlists`\n  );\n  closeModal();\n});\n\n// Importing a new playlist\neventModule.importPlaylistSubmit.addEventListener('submit', evt => {\n  evt.preventDefault();\n\n  let importPlaylistName = document.querySelector('.im-pl__name').value;\n  let clearValue = document.querySelector('.im-pl__name');\n  let flexibleName = importPlaylistName.toLowerCase();\n  let importedPlaylistID;\n\n  let importError = document.querySelector('.im-pl__error');\n  let tabContentContainer = document.querySelector('.tab-content-container');\n\n  tabContentContainer.classList.remove('tab-content--error');\n\n  clearValue.value = '';\n\n  if (importError) {\n    removeElementFromDOM(importError);\n  }\n\n  spotifyGrab(`https://api.spotify.com/v1/me/playlists`)\n    .then(data => {\n      return data.json();\n    })\n    .then(listOfUserPlaylists => {\n      // Cycle through to get user requested playlist ID\n      listOfUserPlaylists.items.forEach(playlist => {\n        if (flexibleName == playlist.name.toLowerCase()) {\n          importedPlaylistID = playlist.id;\n          importPlaylistName = playlist.name;\n        }\n      });\n\n      let playlistExists = updateTotalPlaylists(\n        importPlaylistName,\n        importedPlaylistID\n      );\n\n      // If no matching playlist in Spotify account\n      if (!importedPlaylistID) {\n        createImportError(\n          `Sorry, there's no playlist matching this name \"${importPlaylistName}\" out of your Spotify playlists!`\n        );\n\n        return -1;\n      }\n\n      // A playlist with this name has already been imported\n      if (playlistExists) {\n        createImportError(\n          `A playlist with the name \"${importPlaylistName}\" has already been imported.`\n        );\n        return -1;\n      }\n\n      playlistPlate(importPlaylistName, importedPlaylistID);\n      closeModal();\n\n      // Fetch for that specfic ID\n      // Fetch that URL get the returned tracks and put into creat Playlist tracks\n      spotifyGrab(\n        `https://api.spotify.com/v1/users/${\n          myModule.userInfo.id\n        }/playlists/${importedPlaylistID}/tracks`\n      )\n        .then(response => {\n          return response.json();\n        })\n        .then(importedTracks => {\n          importedTracks.items.forEach(playlistSong => {\n            createPlaylistTrackBody(playlistSong, importPlaylistName);\n          });\n          confirmAction(importPlaylistName, 'import');\n        });\n    })\n    .catch(err => {\n      console.log(err);\n    });\n});\n\n// Move song from one playlist to another\neventModule.moveSongModal.addEventListener('submit', evt => {\n  // Grab selection chosen from a User\n  evt.preventDefault();\n  let mvsSelect = document.querySelector('.mvs-select');\n  let moveSongForm = document.querySelector('.tran-modal__mv-song');\n  let songAttachment = document.querySelector('.song-action');\n  let tranModal = document.querySelector('.tran-modal');\n\n  // Why remove this?\n  removeElementFromDOM(mvsSelect);\n  removeElementFromDOM(songAttachment);\n\n  let moveSong = [myModule.deleteThis];\n  let moveToThisPlaylist;\n  myModule.playlistNameValue = mvsSelect.value;\n\n  moveToThisPlaylist = getPlaylistID(myModule.playlistNameValue);\n\n  tranModal.classList.toggle('tran-modal__show-modal');\n\n  // tranModal.classList.toggle('tran-modal__show');\n  moveSongForm.classList.toggle('tran-modal__show-form');\n\n  deleteSong(\n    `https://api.spotify.com/v1/users/${myModule.userInfo.id}/playlists/${\n      myModule.currentChosenPlaylist.id\n    }/tracks`,\n    myModule.deleteThis\n  )\n    .then(response => {\n      response.json();\n    })\n    .then(() => {\n      // Get back updated playlist *** code from add songs to playlist section ** place into function\n      spotifyGrab(\n        `https://api.spotify.com/v1/users/${myModule.userInfo.id}/playlists/${\n          myModule.currentChosenPlaylist.id\n        }/tracks`\n      )\n        .then(playlist => {\n          return playlist.json();\n        })\n\n        .then(updatedPlaylist => {\n          refreshPlaylistBody(myModule.currentChosenPlaylist.name);\n\n          updatedPlaylist.items.forEach(playlistSong => {\n            createPlaylistTrackBody(playlistSong);\n          });\n        })\n        .then(() => {\n          moveSongFromPlaylist(\n            `https://api.spotify.com/v1/users/${\n              myModule.userInfo.id\n            }/playlists/${moveToThisPlaylist}/tracks`,\n            moveSong,\n            moveToThisPlaylist\n          );\n        });\n    })\n    .catch(err => {\n      console.log(err);\n    });\n});\n\n// Delete song from Playlist\neventModule.deleteSongModal.addEventListener('submit', evt => {\n  evt.preventDefault();\n\n  let delSongForm = document.querySelector('.tran-modal__del-song');\n\n  let songAttachment = document.querySelector('.song-action');\n  let tranModal = document.querySelector('.tran-modal');\n\n  removeElementFromDOM(songAttachment);\n  // deleteModal.classList.toggle(\"delete-modal__show-modal\");\n\n  delSongForm.classList.toggle('tran-modal__show-form');\n  tranModal.classList.toggle('tran-modal__show-modal');\n\n  deleteSong(\n    `https://api.spotify.com/v1/users/${myModule.userInfo.id}/playlists/${\n      myModule.currentChosenPlaylist.id\n    }/tracks`,\n    myModule.deleteThis\n  )\n    .then(response => {\n      response.json();\n    })\n    .then(() => {\n      // Get back updated playlist *** code from add songs to playlist section ** place into function\n      spotifyGrab(\n        `https://api.spotify.com/v1/users/${myModule.userInfo.id}/playlists/${\n          myModule.currentChosenPlaylist.id\n        }/tracks`\n      )\n        .then(playlist => {\n          return playlist.json();\n        })\n        .then(updatedPlaylist => {\n          refreshPlaylistBody(myModule.currentChosenPlaylist.name);\n\n          updatedPlaylist.items.forEach(playlistSong => {\n            createPlaylistTrackBody(playlistSong);\n          });\n        });\n    })\n    .catch(err => {\n      console.log(err);\n    });\n});\n\n// Remove a playlist\neventModule.removePlaylistModal.addEventListener('submit', evt => {\n  evt.preventDefault();\n  evt.stopPropagation();\n\n  let tranModal = document.querySelector('.tran-modal');\n  let removePlaylistForm = document.querySelector('.tran-modal__rm-playlist');\n\n  let currentHiddenPlaylists = document.querySelectorAll(\n    '.playlist-list__playlist--hide'\n  );\n\n  // Show other playlist when one chosen is deleted\n  currentHiddenPlaylists.forEach(hiddenElement => {\n    hiddenElement.classList.remove('playlist-list__playlist--hide');\n  });\n\n  tranModal.classList.toggle('tran-modal__show-modal');\n  removePlaylistForm.classList.toggle('tran-modal__show-form');\n\n  myModule.grandparentOfTarget.childNodes.forEach(child => {\n    if (child === myModule.deleteMe) {\n      myModule.grandparentOfTarget.removeChild(child);\n    }\n  });\n  // Takes in a playlist name to fetch the ID and index position to remove from Total Playlists array\n\n  removeFromTotalPlaylists(myModule.deleteMe.childNodes[0].textContent);\n});\n\n// Polyfill if Smooth Behavior is not supported\nfunction moveScrollPosition(timestamp, dist, duration) {\n  let timeStamp = timestamp || new Date().getTime();\n  let runtime = timeStamp - myModule.startTime;\n  let progress = runtime / duration;\n\n  progress = Math.min(progress, 1);\n  window.scrollTo(0, (dist * progress).toFixed(2));\n\n  if (runtime < duration) {\n    requestAnimationFrame(function(timestamp) {\n      moveScrollPosition(timestamp, dist, duration);\n    });\n  }\n}\n\n// If mood does not match or no tracks are returned from search\nfunction noTrackResult() {\n  let noResult = document.createElement('h1');\n  noResult.textContent = `Sorry can't find any songs matching the mood \"${\n    myModule.storeMoodValue\n  }\"!`;\n  noResult.classList.add('no-result');\n\n  document.body.appendChild(noResult);\n}\n\n// Show music\neventModule.moodForm.addEventListener('submit', evt => {\n  evt.preventDefault();\n\n  const userMood = document.querySelector('.mood__val');\n  const userMoodValue = userMood.value.toLowerCase();\n  const playlistFooter = document.querySelector('.playlist');\n\n  myModule.storeMoodValue = userMood.value;\n  // const tracksDiv = document.querySelector('.tracks');\n  myModule.currentTracks = [];\n\n  myModule.wasSubmitted = true;\n\n  let storeGenres = cleanUpGenres();\n  moodSubmitCleanUp();\n\n  // userMood.value = '';\n\n  // Fetch emotion json from my database\n  fetch(`/user/mood/${userMoodValue}`)\n    .then(data => {\n      return data.json();\n    })\n    .then(audioFeatures => {\n      // No music for that mood\n      if (audioFeatures.length === 0) {\n        noTrackResult();\n        // smoothingScroll('.no-result');\n        return -1;\n      } else {\n        const maxVal = Math.max(...audioFeatures[0].idNumbers);\n        const minVal = Math.min(...audioFeatures[0].idNumbers);\n\n        myModule.closureURL = buildURL(\n          storeGenres,\n          maxVal,\n          minVal,\n          audioFeatures\n        );\n        let newURL = myModule.closureURL();\n\n        playlistFooter.classList.add('playlist__show');\n\n        spotifyProcessTracks(newURL);\n      }\n    })\n    .catch(err => {\n      console.log(err);\n    });\n});\n\n// Modal's Close Button\neventModule.closeModalBtn.forEach(btn => {\n  btn.addEventListener('click', closeModal);\n});\neventModule.declineModalBtn.forEach(btn => {\n  btn.addEventListener('click', closeModal);\n});\n\n/******  Feature Events *******/\n\n// Expand playlist footer\neventModule.playlistFooter.addEventListener('click', evt => {\n  const playlist = document.querySelector('.playlist');\n  const createBtn = document.querySelector('.playlist-create');\n\n  const importTab = document.getElementById('im-pl-tab');\n  const createTab = document.getElementById('cr-pl-tab');\n  let tranModal = document.querySelector('.tran-modal');\n  let crImPlaylistModal = document.querySelector('.modal');\n\n  if (evt.target.className === 'playlist-bar') {\n    playlist.classList.toggle('extended-playlist');\n\n    if (myModule.isMobile) {\n      let logoContainer = document.querySelector('.logo-container');\n      logoContainer.classList.toggle('show__elem');\n    }\n  }\n\n  if (playlist.classList.contains('extended-playlist')) {\n    createBtn.textContent = 'Create New Playlist +';\n  }\n\n  if (!playlist.classList.contains('extended-playlist')) {\n    createBtn.innerHTML = '<span class=\"playlist-create__sign\">+</span>';\n    // createBtn.textContent = '+';\n  }\n\n  if (evt.target.className === 'playlist-import') {\n    importTab.checked = true;\n    crImPlaylistModal.classList.toggle('modal--show');\n  }\n\n  if (evt.target.className === 'playlist-create') {\n    createTab.checked = true;\n    crImPlaylistModal.classList.toggle('modal--show');\n  }\n  if (evt.target.className === 'playlist-create__sign') {\n    createTab.checked = true;\n    crImPlaylistModal.classList.toggle('modal--show');\n  }\n\n  let playlistName;\n\n  // Playlist Name & ID\n  if (evt.target.classList.contains('playlist-list__playlist')) {\n    let referenceTarget = evt.target.firstChild.childNodes[1];\n    let svgContainer = getChildElementByClass(\n      referenceTarget,\n      'fa-chevron-right'\n    );\n\n    let playlistHidden = document.querySelectorAll(\n      '.playlist-list__playlist--hide'\n    );\n\n    svgContainer.classList.remove('no-animation');\n    svgContainer.classList.toggle('playlist-active-animation');\n\n    playlistName = evt.target.childNodes[0].textContent || ''; // need to fix\n\n    myModule.currentChosenPlaylist.name = playlistName;\n\n    playlistHidden.forEach(playlist => {\n      let playlistSVG = playlist.children[0].firstElementChild.firstChild;\n      playlistSVG.classList.add('no-animation');\n    });\n\n    // let trackWrapper = getChildElementByClass(evt.target, 'track-wrapper');\n    // let playlistTracks = Array.from(trackWrapper.children);\n\n    // playlistTracks.forEach((track) =>{\n    //     let trackMedia = getChildElementByClass(track, 'playlist-track__media');\n    //     let playPath = trackMedia.firstElementChild.firstChild.lastChild;\n\n    //     playPath.classList.add('inactive-dash');\n    // })\n\n    // if(!playlistShow){\n    //     playlistAll.forEach((playlist) => {\n\n    //     })\n    // }\n\n    // Playlist ID\n    for (let k in myModule.totalPlaylists) {\n      if (playlistName === myModule.totalPlaylists[k].name) {\n        // currentChosenPlaylist.name = totalPlaylists[k].name;\n        myModule.currentChosenPlaylist.id = myModule.totalPlaylists[k].id;\n      }\n    }\n  }\n\n  // Remove a playlist\n  if (evt.target.className === 'remove-playlist') {\n    let removePlaylistSpan = document.querySelector('.rm-playlist');\n    let removePlaylistForm = document.querySelector('.tran-modal__rm-playlist');\n\n    tranModal.classList.toggle('tran-modal__show-modal');\n    removePlaylistForm.classList.toggle('tran-modal__show-form');\n\n    removePlaylistSpan.textContent = `\"${\n      evt.target.parentElement.childNodes[0].textContent\n    }\"?`;\n\n    myModule.grandparentOfTarget = evt.target.parentElement.parentElement;\n    myModule.deleteMe = evt.target.parentElement;\n  }\n\n  // Delete Song Modal\n  if (evt.target.classList.contains('delete-modal-trigger')) {\n    evt.stopPropagation();\n\n    // HTML Dom Attachment variables\n    let deleteForm = document.querySelector('.tran-modal__del-song');\n    let deleteFormHook = document.querySelector('.tran-modal__del-verify-head');\n\n    // Dom traversing / set attributes\n    let songActionBody = modalSongBodyAttachment(evt.target);\n\n    tranModal.classList.toggle('tran-modal__show-modal');\n    deleteForm.classList.toggle('tran-modal__show-form');\n\n    deleteFormHook.parentNode.insertBefore(\n      songActionBody.songAction,\n      deleteFormHook.nextElementSibling\n    );\n  }\n\n  // Move Song from one playlist to another\n  if (evt.target.classList.contains('move-song')) {\n    // evt.stopPropagation();\n\n    let moveSongForm = document.querySelector('.tran-modal__mv-song');\n    let playlistSelect = document.createElement('select');\n    let playlistOptions = document.createElement('option');\n    let hookForSelectElem = document.querySelector(\n      '.tran-modal__mv-verify-head'\n    );\n\n    let songActionBody = modalSongBodyAttachment(evt.target);\n\n    // Create options for select\n    for (let i = 0; i < myModule.totalPlaylists.length; i++) {\n      if (\n        myModule.currentChosenPlaylist.name !== myModule.totalPlaylists[i].name\n      ) {\n        playlistOptions = document.createElement('option');\n        playlistOptions.setAttribute('value', myModule.totalPlaylists[i].name);\n        playlistOptions.setAttribute(\n          'data-playlistId',\n          myModule.totalPlaylists[i].id\n        );\n        playlistOptions.textContent = myModule.totalPlaylists[i].name;\n\n        playlistSelect.appendChild(playlistOptions);\n      }\n    }\n\n    playlistSelect.classList.add('mvs-select');\n\n    hookForSelectElem.parentNode.insertBefore(\n      playlistSelect,\n      hookForSelectElem.nextElementSibling\n    );\n    hookForSelectElem.parentNode.insertBefore(\n      songActionBody.songAction,\n      hookForSelectElem.nextElementSibling\n    );\n\n    tranModal.classList.toggle('tran-modal__show-modal');\n    moveSongForm.classList.toggle('tran-modal__show-form');\n  }\n\n  // More options drop down\n  if (evt.target.className === 'options') {\n    let currentShownOptions = document.querySelector('.show__elem');\n    if (currentShownOptions) {\n      currentShownOptions.classList.toggle('show__elem');\n    }\n    myModule.optionsHelper = evt.target;\n    evt.target.firstElementChild.classList.toggle('show__elem');\n  }\n\n  // Show trackwrapper on click showing playlist tracks\n  if (evt.target.classList.contains('playlist-list__playlist')) {\n    let playlistNames = document.querySelectorAll('.playlist-list__playlist');\n\n    // evt.target.classList.toggle('active-playlist');\n\n    playlistNames.forEach(playlist => {\n      if (evt.target !== playlist) {\n        playlist.classList.toggle('playlist-list__playlist--hide');\n      }\n    });\n\n    evt.target.firstElementChild.nextElementSibling.classList.toggle(\n      'track-wrapper--show'\n    );\n    evt.target.classList.toggle('playlist-list__playlist--show');\n  }\n\n  // Show trackwrapper on click showing playlist tracks\n  // if(evt.target.classList.contains('playlist-list__name')){\n  //     let playlistNames = document.querySelectorAll('.playlist-list__playlist');\n\n  //     // evt.target.classList.toggle('active-playlist');\n\n  //     playlistNames.forEach((playlist) =>{\n  //         if(evt.target.parentNode !== playlist){\n  //             playlist.classList.toggle('playlist-list__playlist--hide');\n  //         }\n  //     });\n\n  //     evt.target.parentNode.firstElementChild.nextElementSibling.classList.toggle('track-wrapper--show');\n  //     evt.target.parentNode.classList.toggle('playlist-list__playlist--show');\n  // }\n});\n\n// Refactor with \"genres search \"\ndocument\n  .querySelector('.genres-filter__search')\n  .addEventListener('input', evt => {\n    let currentValue = evt.target.value;\n\n    if (currentValue === '') {\n      let input = document.getElementsByClassName('genres-list__item');\n      let filter = document\n        .querySelector('.genres-filter__search')\n        .value.toUpperCase();\n\n      // Loop through all list items, and hide those who don't match the search query\n      for (let i = 0; i < input.length; i++) {\n        let currentElem = input[i];\n        if (currentElem.textContent.toUpperCase().indexOf(filter) > -1) {\n          currentElem.style.display = '';\n        } else {\n          currentElem.style.display = 'none';\n        }\n      }\n    }\n  });\n\n// Genres Section\neventModule.genres.addEventListener('click', evt => {\n  evt.stopPropagation();\n\n  // Genres Dropdown\n  if (evt.target.classList.contains('genres-drop__header')) {\n    let rightCaret = document.querySelector('.fa-caret-right');\n\n    let genresDiv = document.querySelector('.genres');\n\n    let genreFilterToggle = document.querySelector('.genres-filter__toggle');\n    let genreModal = genreFilterToggle.parentElement.parentElement;\n    let genreModalContent = genreFilterToggle.parentElement;\n\n    // Set up Mobile Genre Header\n    if (myModule.isMobile == true) {\n      let genreModalCloseBtn = document.querySelector('.close-modal-btn--g');\n\n      // Remove Modal Btn on first instance\n      if (genreModalCloseBtn) {\n        removeElementFromDOM(genreModalCloseBtn);\n      }\n\n      genresDiv.classList.toggle('genres-mb');\n      genreModalContent.classList.toggle('tran-modal--genre-mb');\n      document\n        .querySelector('.genres-drop__header')\n        .classList.toggle('genres-drop__header-mb');\n\n      // setTimeout(function(){\n      //     let genresFilterTabHeight = document.querySelector('.genres-filter-tab').offsetHeight\n      //     let genresSearchHeadHeight = document.querySelector('.genres-filter__search-head').offsetHeight;\n      //     let genresDropHeight = document.querySelector('.genres-search-filter').offsetHeight;\n      //     let genresList = document.querySelector('.genres-list');\n\n      //     genresList.style.height = `calc(100vh - (${genresFilterTabHeight}px + ${genresSearchHeadHeight}px + ${genresDropHeight}px + 20px))`;\n\n      // }, 10);\n    }\n\n    // Genre Caret Animation\n    rightCaret.classList.remove('no-animation');\n    rightCaret.classList.toggle('genres-active-animation');\n    genreFilterToggle.classList.toggle('genres-show');\n    genreModal.classList.toggle('tran-modal__show-modal');\n  }\n\n  // Clear All Genres Button\n  if (evt.target.className === 'genres-filter-tab__clear') {\n    let filterList = document.querySelector('.genres-filter-tab__list');\n    let chosenGenres = Array.from(document.querySelectorAll('.genres-toggle'));\n    let moodDiv = document.querySelector('.genres-search-filter-genre');\n    chosenGenres.forEach(genre => {\n      genre.classList.remove('genres-toggle');\n    });\n\n    while (filterList.firstChild) {\n      filterList.removeChild(filterList.firstChild);\n    }\n    while (moodDiv.firstChild) {\n      moodDiv.removeChild(moodDiv.firstChild);\n    }\n  }\n\n  if (evt.target.classList.contains('genres-list__item')) {\n    let chosenGenresLength = document.querySelectorAll('.genres-toggle').length;\n    let filterList = document.querySelector('.genres-filter-tab__list');\n\n    let filterTags = document.querySelectorAll('.genres-filter-tab__tag');\n    let searchFilterTags = document.querySelectorAll(\n      '.genres-search-filter-genre__tag'\n    );\n\n    if (chosenGenresLength > 4) {\n      // Remove from DOM\n      filterTags.forEach(pickedGenre => {\n        if (evt.target.textContent === pickedGenre.textContent) {\n          pickedGenre.remove();\n        }\n      });\n      searchFilterTags.forEach(pickedGenre => {\n        if (evt.target.textContent === pickedGenre.textContent) {\n          pickedGenre.remove();\n        }\n      });\n\n      evt.target.classList.remove('genres-toggle');\n    } else if (evt.target.classList.contains('genres-toggle')) {\n      // Remove from DOM\n      filterTags.forEach(pickedGenre => {\n        if (evt.target.textContent === pickedGenre.textContent) {\n          pickedGenre.remove();\n        }\n      });\n      searchFilterTags.forEach(pickedGenre => {\n        if (evt.target.textContent === pickedGenre.textContent) {\n          pickedGenre.remove();\n        }\n      });\n      evt.target.classList.remove('genres-toggle');\n    } else {\n      evt.target.classList.toggle('genres-toggle');\n      let moodDiv = document.querySelector('.genres-search-filter-genre');\n\n      myModule.sortedChosenGenres.push(evt.target.textContent);\n\n      let genreTabListItem = document.createElement('li');\n      let underSearchGenreItem = document.createElement('span');\n      let closeIcon = document.createElement('i');\n      let searchCloseIcon = document.createElement('i');\n\n      underSearchGenreItem.textContent = evt.target.textContent;\n      genreTabListItem.textContent = evt.target.textContent;\n      underSearchGenreItem.classList.add('genres-search-filter-genre__tag');\n      genreTabListItem.classList.add('genres-filter-tab__tag');\n      closeIcon.className = 'fas fa-times genres-filter-tab__x';\n      searchCloseIcon.className = 'fas fa-times genres-search-filter-genre__x';\n\n      filterList.appendChild(genreTabListItem);\n      genreTabListItem.appendChild(closeIcon);\n      underSearchGenreItem.appendChild(searchCloseIcon);\n\n      // Set up Mobile Genre Header\n\n      if (myModule.isMobile !== true) {\n        moodDiv.appendChild(underSearchGenreItem);\n      }\n    }\n  }\n\n  // Genre Tags\n  if (evt.target.className === 'genres-filter-tab__tag') {\n    let chosenGenres = Array.from(document.querySelectorAll('.genres-toggle'));\n    let searchFilterTags = document.querySelectorAll(\n      '.genres-search-filter-genre__tag'\n    );\n\n    chosenGenres.forEach(genre => {\n      if (evt.target.textContent === genre.textContent) {\n        genre.classList.remove('genres-toggle');\n        // genre.remove();\n      }\n    });\n\n    searchFilterTags.forEach(pickedGenre => {\n      if (evt.target.textContent === pickedGenre.textContent) {\n        pickedGenre.remove();\n      }\n    });\n\n    evt.target.classList.remove('genres-filter-tab__tag');\n    evt.target.remove();\n  }\n  if (evt.target.className === 'genres-search-filter-genre__tag') {\n    let chosenGenres = Array.from(document.querySelectorAll('.genres-toggle'));\n    let genreTabTags = document.querySelectorAll('.genres-filter-tab__tag');\n\n    chosenGenres.forEach(genre => {\n      if (evt.target.textContent === genre.textContent) {\n        genre.classList.remove('genres-toggle');\n        // genre.remove();\n      }\n    });\n\n    genreTabTags.forEach(genre => {\n      if (evt.target.textContent === genre.textContent) {\n        genre.remove();\n      }\n    });\n\n    evt.target.classList.remove('genres-search-filter-genre__tag');\n    evt.target.remove();\n  }\n});\n\n// Genre search filter\neventModule.genresFilterSearch.addEventListener('keyup', () => {\n  let input = document.getElementsByClassName('genres-list__item');\n  let filter = document\n    .querySelector('.genres-filter__search')\n    .value.toUpperCase();\n\n  // Loop through all list items, and hide those who don't match the search query\n  for (let i = 0; i < input.length; i++) {\n    let currentElem = input[i];\n    if (currentElem.textContent.toUpperCase().indexOf(filter) > -1) {\n      currentElem.style.display = '';\n    } else {\n      currentElem.style.display = 'none';\n    }\n  }\n});\n\neventModule.logoContainer.addEventListener('click', () => {\n  if (myModule.smoothingSupported) {\n    smoothingScroll('.mood');\n  } else {\n    requestAnimationFrame(function(timestamp) {\n      myModule.startTime = timestamp || new Date().getTime();\n      moveScrollPosition(timestamp, 0, 500);\n    });\n  }\n});\n\n// function scrolledInto(){\n//     let executed = false;\n\n//     return function(){\n//         if(!executed){\n//             let scrollURL = myModule.closureURL();\n//             spotifyProcessTracks(scrollURL);\n//             executed = true;\n//         }\n//         else{\n//             return -1;\n//         }\n//     }\n// }\n\n// if(scrollPosition + windowSize >=  bodyHeight - (bodyHeight * 0.20)){\n//     myModule.inRange = true;\n// let scrollURL = myModule.closureURL();\n// spotifyProcessTracks(scrollURL);\n// }\n//\n// if (myModule.inRange === true && scrollPosition + windowSize >= bodyHeight){\n//     let shootFetch = scrolledInto();\n// }\n\n//  oNce that is done and dom is back loaded, myModule.inRange = false;\n\n// Infinite Scroll\ndocument.addEventListener('scroll', function() {\n  const tracksDiv = document.querySelector('.tracks');\n  let scrollPosition = window.pageYOffset;\n  let windowSize = window.innerHeight;\n  let bodyHeight = document.body.offsetHeight;\n  // const wrapWrap = document.querySelector('.wrap');\n\n  // Mobile scrolling features\n  if (myModule.isMobile) {\n    let webLogo = document.querySelector('.logo');\n    clearTimeout(myModule.mobileIsScrolling);\n\n    myModule.mobileIsScrolling = setTimeout(function() {\n      webLogo.classList.remove('logo--size');\n    }, 200);\n\n    if (scrollPosition > tracksDiv.getBoundingClientRect().top) {\n      webLogo.classList.add('logo--size');\n    }\n    if (tracksDiv.getBoundingClientRect().top > 0) {\n      webLogo.classList.remove('logo--size');\n    }\n  }\n\n  for (let i = 0; i < myModule.scrollPositionTracker.length; i++) {\n    if (\n      myModule.scrollPositionTracker[i].scrollPosition > scrollPosition - 500 &&\n      myModule.scrollPositionTracker[i].scrollPosition < scrollPosition + 500\n    ) {\n      let allMedia = Array.from(\n        document.querySelectorAll('.track__progress-bar')\n      );\n      let playlistMedia = Array.from(\n        document.querySelectorAll('.playlist-track__progress-bar')\n      );\n\n      allMedia.forEach(progressBar => {\n        progressBar.style.backgroundColor =\n          myModule.scrollPositionTracker[i].color;\n      });\n\n      playlistMedia.forEach(progressBar => {\n        progressBar.style.backgroundColor =\n          myModule.scrollPositionTracker[i].color;\n      });\n\n      document.body.style.backgroundColor =\n        myModule.scrollPositionTracker[i].color;\n    }\n    if (scrollPosition < myModule.initScroll.moment) {\n      let allMedia = Array.from(\n        document.querySelectorAll('.track__progress-bar')\n      );\n      let playlistMedia = Array.from(\n        document.querySelectorAll('.playlist-track__progress-bar')\n      );\n      allMedia.forEach(progressBar => {\n        progressBar.style.backgroundColor = '#E47A67';\n      });\n\n      playlistMedia.forEach(progressBar => {\n        progressBar.style.backgroundColor = '#E47A67';\n      });\n\n      document.body.style.backgroundColor = '#E47A67';\n    }\n  }\n\n  // Only fetch new songs if a mood was submitted\n  if (tracksDiv.childNodes.length > 0) {\n    if (scrollPosition + windowSize >= bodyHeight - bodyHeight * 0.05) {\n      myModule.scrollCount++;\n\n      if (myModule.scrollCount === 1) {\n        let scrollURL = myModule.closureURL();\n\n        myModule.wasSubmitted = false;\n\n        spotifyProcessTracks(scrollURL);\n\n        if (myModule.initScroll.happened === false) {\n          myModule.initScroll.happened = true;\n          myModule.initScroll.moment = scrollPosition;\n        }\n\n        let allMedia = Array.from(\n          document.querySelectorAll('.track__progress-bar')\n        );\n        let currentColor = myModule.initColor();\n\n        let referenceObj = {\n          color: currentColor,\n          scrollPosition: scrollPosition\n        };\n\n        myModule.scrollPositionTracker.push(referenceObj);\n\n        allMedia.forEach(progressBar => {\n          progressBar.style.backgroundColor = currentColor;\n        });\n\n        document.body.style.backgroundColor = currentColor;\n      }\n    }\n  }\n});\n\ndocument.querySelector('.tran-modal--genre').addEventListener('click', evt => {\n  // evt.stopPropagation()\n  if (evt.target === document.querySelector('.tran-modal--genre')) {\n    closeModal();\n  }\n});\n\nfunction handleBackgroundColor() {\n  let count = 0;\n  let colors = [\n    '#FFB63F',\n    '#FEC4CF',\n    '#6C95CC',\n    '#CC3B6C',\n    '#89BCE5',\n    '#FED4CA',\n    '#DEDCED'\n  ];\n\n  return function changeBackgroundColor() {\n    count++;\n    if (count === colors.length) {\n      count = 0;\n    }\n    console.log(count);\n    return colors[count];\n  };\n}\n\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ })

/******/ });